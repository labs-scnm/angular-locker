/*! angular-locker v1.2.1 | (c) 2015 @tymondesigns | https://github.com/tymondesigns/angular-locker */
{"version":3,"sources":["angular-locker.min.js"],"names":["root","factory","define","amd","angular","exports","module","window","this","provider","_value","value","param","isFunction","_keyByVal","object","Object","keys","filter","key","_error","msg","Error","_now","Math","floor","Date","getTime","defaults","driver","namespace","eventsEnabled","separator","setDefaultDriver","getDefaultDriver","setDefaultNamespace","getDefaultNamespace","setEventsEnabled","enabled","getEventsEnabled","setSeparator","getSeparator","$get","$window","$rootScope","$parse","Locker","_registeredDrivers","local","localStorage","session","sessionStorage","_resolveDriver","hasOwnProperty","_deriveDriver","_driver","_namespace","_eventsEnabled","_separator","_watchers","_checkSupport","isUndefined","_supported","l","setItem","removeItem","e","_getPrefix","_serialize","toJson","_unserialize","fromJson","_event","name","payload","$emit","extend","_setItem","ttl","oldVal","_getItem","val","v","_exists","equals","oldValue","newValue","indexOf","item","getItem","_removeItem","prototype","put","isObject","forEach","isDefined","add","has","get","def","isArray","items","k","arguments","length","forget","map","pull","all","split","splice","join","clean","empty","clear","count","bind","$scope","$eval","assign","self","$id","$watch","newVal","unbind","watchId","instance","getDriver","getNamespace","supported"],"mappings":"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","file":"angular-locker.min.js","sourcesContent":["/**\n * angular-locker\n *\n * A simple & configurable abstraction for local/session storage in angular projects.\n *\n * @link https://github.com/tymondesigns/angular-locker\n * @author Sean Tymon @tymondesigns\n * @license MIT License, http://www.opensource.org/licenses/MIT\n */\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(function () {\n            return factory(root.angular);\n        });\n    } else if (typeof exports === 'object') {\n        module.exports = factory(root.angular || (window && window.angular));\n    } else {\n        factory(root.angular);\n    }\n})(this, function (angular) {\n\n    'use strict';\n\n    angular.module('angular-locker', [])\n\n    .provider('locker', function () {\n\n        /**\n         * If value is a function then execute, otherwise return\n         *\n         * @param  {Mixed}  value\n         * @param  {Mixed}  parameter\n         * @return {Mixed}\n         */\n        var _value = function (value, param) {\n            return angular.isFunction(value) ? value(param) : value;\n        };\n\n        /**\n         * Get the key of an object by the value\n         *\n         * @param  {Object}  object\n         * @param  {Mixed}   value\n         * @return {String}\n         */\n        var _keyByVal = function (object, value) {\n            return Object.keys(object).filter(function (key) { return object[key] === value; })[0];\n        };\n\n        /**\n         * Trigger an error\n         *\n         * @param  {String}  msg\n         * @return {void}\n         */\n        var _error = function (msg) {\n            throw new Error('[angular-locker] ' + msg);\n        };\n\n        /**\n         * Get the number of seconds since the epoch\n         *\n         * @return {Integer}\n         */\n        var _now  = function () {\n            return Math.floor((new Date()).getTime()/1000);\n        };\n\n        /**\n         * Set the defaults\n         *\n         * @type {Object}\n         */\n        var defaults = {\n            driver: 'local',\n            namespace: 'locker',\n            eventsEnabled: true,\n            separator: '.'\n        };\n\n        return {\n\n            /**\n             * Allow setting of default storage driver via `lockerProvider`\n             * e.g. lockerProvider.setDefaultDriver('session');\n             *\n             * @param  {String|Function}  driver\n             * @return {self}\n             */\n            setDefaultDriver: function (driver) {\n                defaults.driver = _value(driver);\n\n                return this;\n            },\n\n            /**\n             * Get the default driver\n             *\n             * @return {String}\n             */\n            getDefaultDriver: function () {\n                return defaults.driver;\n            },\n\n            /**\n             * Allow setting of default namespace via `lockerProvider`\n             * e.g. lockerProvider.setDefaultNamespace('myAppName');\n             *\n             * @param  {String|Function}  namespace\n             * @return {self}\n             */\n            setDefaultNamespace: function (namespace) {\n                defaults.namespace = _value(namespace);\n\n                return this;\n            },\n\n            /**\n             * Get the default namespace\n             *\n             * @return {String}\n             */\n            getDefaultNamespace: function () {\n                return defaults.namespace;\n            },\n\n            /**\n             * Set whether the events are enabled\n             *\n             * @param  {Boolean|Function}  enabled\n             * @return {self}\n             */\n            setEventsEnabled: function (enabled) {\n                defaults.eventsEnabled = _value(enabled);\n\n                return this;\n            },\n\n            /**\n             * Get whether the events are enabled\n             *\n             * @return {Boolean}\n             */\n            getEventsEnabled: function () {\n                return defaults.eventsEnabled;\n            },\n\n            /**\n             * Set the separator to use with namespace in keys\n             *\n             * @param  {String|Function} separator\n             * @return {self}\n             */\n            setSeparator: function (separator) {\n                defaults.separator = _value(separator);\n\n                return this;\n            },\n\n            /**\n             * Get the separator\n             *\n             * @return {String}\n             */\n            getSeparator: function () {\n                return defaults.separator;\n            },\n\n            /**\n             * The locker service\n             */\n            $get: ['$window', '$rootScope', '$parse', function ($window, $rootScope, $parse) {\n\n                /**\n                 * Define the Locker class\n                 *\n                 * @param {Storage}  driver\n                 * @param {String}   namespace\n                 */\n                function Locker (driver, namespace) {\n\n                    /**\n                     * Out of the box drivers\n                     *\n                     * @type {Object}\n                     */\n                    this._registeredDrivers = {\n                        local: $window.localStorage,\n                        session: $window.sessionStorage\n                    };\n\n                    /**\n                     * Get the Storage instance from the key\n                     *\n                     * @param  {String}  driver\n                     * @return {Storage}\n                     */\n                    this._resolveDriver = function (driver) {\n                        if (! this._registeredDrivers.hasOwnProperty(driver)) {\n                            _error('The driver \"' + driver + '\" was not found.');\n                        }\n\n                        return this._registeredDrivers[driver];\n                    };\n\n                    /**\n                     * Get the driver key (local/session) by the Storage instance\n                     *\n                     * @param  {Storage}  driver\n                     * @return {String}\n                     */\n                    this._deriveDriver = function (driver) {\n                        return _keyByVal(this._registeredDrivers, driver);\n                    };\n\n                    /**\n                     * @type {Storage}\n                     */\n                    this._driver = this._resolveDriver(driver);\n\n                    /**\n                     * @type {String}\n                     */\n                    this._namespace = namespace;\n\n                    /**\n                     * @type {Boolean}\n                     */\n                    this._eventsEnabled = defaults.eventsEnabled;\n\n                    /**\n                     * @type {String}\n                     */\n                    this._separator = defaults.separator;\n\n                    /**\n                     * @type {Object}\n                     */\n                    this._watchers = {};\n\n                    /**\n                     * Check browser support\n                     *\n                     * @see https://github.com/Modernizr/Modernizr/blob/master/feature-detects/storage/localstorage.js#L38-L47\n                     * @param  {String}  driver\n                     * @return {Boolean}\n                     */\n                    this._checkSupport = function (driver) {\n                        if (angular.isUndefined(this._supported)) {\n                            var l = 'l';\n                            try {\n                                this._resolveDriver(driver || 'local').setItem(l, l);\n                                this._resolveDriver(driver || 'local').removeItem(l);\n                                this._supported = true;\n                            } catch (e) {\n                                this._supported = false;\n                            }\n                        }\n\n                        return this._supported;\n                    };\n\n                    /**\n                     * Build the storage key from the namspace\n                     *\n                     * @param  {String}  key\n                     * @return {String}\n                     */\n                    this._getPrefix = function (key) {\n                        if (! this._namespace) return key;\n\n                        return this._namespace + this._separator + key;\n                    };\n\n                    /**\n                     * Try to encode value as json, or just return the value upon failure\n                     *\n                     * @param  {Mixed}  value\n                     * @return {Mixed}\n                     */\n                    this._serialize = function (value) {\n                        try {\n                            return angular.toJson(value);\n                        } catch (e) {\n                            return value;\n                        }\n                    };\n\n                    /**\n                     * Try to parse value as json, if it fails then it probably isn't json so just return it\n                     *\n                     * @param  {String}  value\n                     * @return {Object|String}\n                     */\n                    this._unserialize = function (value) {\n                        try {\n                            return angular.fromJson(value);\n                        } catch (e) {\n                            return value;\n                        }\n                    };\n\n                    /**\n                     * Trigger an event\n                     *\n                     * @param  {String}  name\n                     * @param  {Object}  payload\n                     * @return {void}\n                     */\n                    this._event = function (name, payload) {\n                        if (! this._eventsEnabled) return;\n\n                        $rootScope.$emit(name, angular.extend(payload, {\n                            driver: this._deriveDriver(this._driver),\n                            namespace: this._namespace,\n                        }));\n                    };\n\n                    /**\n                     * Add to storage\n                     *\n                     * @param {String}  key\n                     * @param {Mixed}  value\n                     */\n                    this._setItem = function (key, value, ttl) {\n                        if (! this._checkSupport()) _error('The browser does not support localStorage');\n\n                        ttl = ttl || false;\n\n                        try {\n                            var oldVal = this._getItem(key),\n                                val = { v: value, e: ttl === false ? false : _now() + ttl };\n\n                            this._driver.setItem(this._getPrefix(key), this._serialize(val));\n\n                            if (this._exists(key) && ! angular.equals(oldVal, value)) {\n                                this._event('locker.item.updated', { key: key, oldValue: oldVal, newValue: value });\n                            } else {\n                                this._event('locker.item.added', { key: key, value: value });\n                            }\n\n                        } catch (e) {\n                            if (['QUOTA_EXCEEDED_ERR', 'NS_ERROR_DOM_QUOTA_REACHED', 'QuotaExceededError'].indexOf(e.name) !== -1) {\n                                _error('The browser storage quota has been exceeded');\n                            } else {\n                                _error('Could not add item with key \"' + key + '\"');\n                            }\n                        }\n                    };\n\n                    /**\n                     * Get from storage\n                     *\n                     * @param  {String}  key\n                     * @return {Mixed}\n                     */\n                    this._getItem = function (key) {\n                        if (! this._checkSupport()) _error('The browser does not support localStorage');\n\n                        var item = this._unserialize( this._driver.getItem(this._getPrefix(key)) );\n\n                        if (angular.isUndefined(item) || item === null) return void 0;\n\n                        // if the item has expired then remove it\n                        if (item.e !== false && item.e < _now()) {\n                            item.v = void 0;\n                            this._removeItem(key);\n                        }\n\n                        return item.v;\n                    };\n\n                    /**\n                     * Exists in storage\n                     *\n                     * @param  {String}  key\n                     * @return {Boolean}\n                     */\n                    this._exists = function (key) {\n                        if (! this._checkSupport()) _error('The browser does not support localStorage');\n\n                        return this._driver.hasOwnProperty(this._getPrefix(_value(key)));\n                    };\n\n                    /**\n                     * Remove from storage\n                     *\n                     * @param  {String}  key\n                     * @return {Boolean}\n                     */\n                    this._removeItem = function (key) {\n                        if (! this._checkSupport()) _error('The browser does not support localStorage');\n\n                        if (! this._exists(key)) return false;\n\n                        this._driver.removeItem(this._getPrefix(key));\n\n                        this._event('locker.item.forgotten', { key: key });\n\n                        return true;\n                    };\n                }\n\n                /**\n                 * Define the public api\n                 *\n                 * @type {Object}\n                 */\n                Locker.prototype = {\n\n                    /**\n                     * Add a new item to storage (even if it already exists)\n                     *\n                     * @param  {Mixed}    key\n                     * @param  {Mixed}    value\n                     * @param  {Integer}  ttl\n                     * @return {self}\n                     */\n                    put: function (key, value, ttl) {\n                        if (! key) return false;\n\n                        key = _value(key);\n\n                        if (angular.isObject(key)) {\n                            angular.forEach(key, function (value, key) {\n                                this._setItem(key, value);\n                            }, this);\n                        } else {\n                            if (! angular.isDefined(value)) return false;\n                            this._setItem(key, _value(value, this._getItem(key)), ttl);\n                        }\n\n                        return this;\n                    },\n\n                    /**\n                     * Add an item to storage if it doesn't already exist\n                     *\n                     * @param  {Mixed}    key\n                     * @param  {Mixed}    value\n                     * @param  {Integer}  ttl\n                     * @return {Boolean}\n                     */\n                    add: function (key, value, ttl) {\n                        if (! this.has(key)) {\n                            this.put(key, value, ttl);\n                            return true;\n                        }\n\n                        return false;\n                    },\n\n                    /**\n                     * Retrieve the specified item from storage\n                     *\n                     * @param  {String|Array}  key\n                     * @param  {Mixed}  def\n                     * @return {Mixed}\n                     */\n                    get: function (key, def) {\n                        if (angular.isArray(key)) {\n                            var items = {};\n                            angular.forEach(key, function (k) {\n                                if (this.has(k)) items[k] = this._getItem(k);\n                            }, this);\n\n                            return items;\n                        }\n\n                        if (! this.has(key)) return arguments.length === 2 ? def : void 0;\n\n                        return this._getItem(key);\n                    },\n\n                    /**\n                     * Determine whether the item exists in storage\n                     *\n                     * @param  {String|Function}  key\n                     * @return {Boolean}\n                     */\n                    has: function (key) {\n                        return this._exists(key);\n                    },\n\n                    /**\n                     * Remove specified item(s) from storage\n                     *\n                     * @param  {Mixed}  key\n                     * @return {Object}\n                     */\n                    forget: function (key) {\n                        key = _value(key);\n\n                        if (angular.isArray(key)) {\n                            key.map(this._removeItem, this);\n                        } else {\n                            this._removeItem(key);\n                        }\n\n                        return this;\n                    },\n\n                    /**\n                     * Retrieve the specified item from storage and then remove it\n                     *\n                     * @param  {String|Array}  key\n                     * @param  {Mixed}  def\n                     * @return {Mixed}\n                     */\n                    pull: function (key, def) {\n                        var value = this.get(key, def);\n\n                        this.forget(key);\n\n                        return value;\n                    },\n\n                    /**\n                     * Return all items in storage within the current namespace/driver\n                     *\n                     * @return {Object}\n                     */\n                    all: function () {\n                        var items = {};\n\n                        angular.forEach(this._driver, function (value, key) {\n                            var split = key.split(this._separator);\n                            if (split.length > 1 && split[0] === this._namespace) {\n                                split.splice(0, 1);\n                                key = split.join(this._separator);\n                            }\n                            if (this.has(key)) items[key] = this.get(key);\n                        }, this);\n\n                        return items;\n                    },\n\n                    /**\n                     * Remove all items set within the current namespace/driver\n                     *\n                     * @return {self}\n                     */\n                    clean: function () {\n                        this.forget(Object.keys(this.all()));\n\n                        return this;\n                    },\n\n                    /**\n                     * Empty the current storage driver completely. careful now.\n                     *\n                     * @return {self}\n                     */\n                    empty: function () {\n                        this._driver.clear();\n\n                        return this;\n                    },\n\n                    /**\n                     * Get the total number of items within the current namespace\n                     *\n                     * @return {Integer}\n                     */\n                    count: function () {\n                        return Object.keys(this.all()).length;\n                    },\n\n                    /**\n                     * Bind a storage key to a $scope property\n                     *\n                     * @param  {Object}  $scope\n                     * @param  {String}  key\n                     * @param  {Mixed}   def\n                     * @return {self}\n                     */\n                    bind: function ($scope, key, def) {\n                        if (angular.isUndefined( $scope.$eval(key) )) {\n                            $parse(key).assign($scope, this.get(key, def));\n                            if (! this.has(key)) this.put(key, def);\n                        }\n\n                        var self = this;\n                        this._watchers[key + $scope.$id] = $scope.$watch(key, function (newVal) {\n                            if (angular.isDefined(newVal)) self.put(key, newVal);\n                        }, angular.isObject($scope[key]));\n\n                        return this;\n                    },\n\n                    /**\n                     * Unbind a storage key from a $scope property\n                     *\n                     * @param  {Object}  $scope\n                     * @param  {String}  key\n                     * @return {self}\n                     */\n                    unbind: function ($scope, key) {\n                        $parse(key).assign($scope, void 0);\n\n                        this.forget(key);\n\n                        var watchId = key + $scope.$id;\n\n                        if (this._watchers[watchId]) {\n                            // execute the de-registration function\n                            this._watchers[watchId]();\n                            delete this._watchers[watchId];\n                        }\n\n                        return this;\n                    },\n\n                    /**\n                     * Set the storage driver on a new instance to enable overriding defaults\n                     *\n                     * @param  {String}  driver\n                     * @return {self}\n                     */\n                    driver: function (driver) {\n                        return this.instance(driver, this._namespace);\n                    },\n\n                    /**\n                     * Get the currently set driver\n                     *\n                     * @return {Storage}\n                     */\n                    getDriver: function () {\n                        return this._driver;\n                    },\n\n                    /**\n                     * Set the namespace on a new instance to enable overriding defaults\n                     *\n                     * @param  {String}  namespace\n                     * @return {self}\n                     */\n                    namespace: function (namespace) {\n                        return this.instance(this._deriveDriver(this._driver), namespace);\n                    },\n\n                    /**\n                     * Get the currently set namespace\n                     *\n                     * @return {String}\n                     */\n                    getNamespace: function () {\n                        return this._namespace;\n                    },\n\n                    /**\n                     * Check browser support\n                     *\n                     * @see https://github.com/Modernizr/Modernizr/blob/master/feature-detects/storage/localstorage.js#L38-L47\n                     * @param  {String}  driver\n                     * @return {Boolean}\n                     */\n                    supported: function (driver) {\n                        return this._checkSupport(driver);\n                    },\n\n                    /**\n                     * Get a new instance of Locker\n                     *\n                     * @param  {String}  driver\n                     * @param  {String}  namespace\n                     * @return {Locker}\n                     */\n                    instance: function (driver, namespace) {\n                        return new Locker(driver, namespace);\n                    }\n                };\n\n                // return the default instance\n                return new Locker(defaults.driver, defaults.namespace);\n            }]\n        };\n\n    });\n\n});"],"sourceRoot":"/source/"}